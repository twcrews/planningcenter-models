<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="/" #>
<#@ import namespace="Crews.PlanningCenter.Models.Generators" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="Microsoft.Extensions.Options" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Crews.Extensions.Primitives" #>
<#@ import namespace="Crews.PlanningCenter.Models.Generators.Extensions" #>
<#
  PlanningCenterApiReferenceService service = new(new(), Options.Create<PlanningCenterApiReferenceService.Options>(new()
    {
      BaseAddress = new("https://api.planningcenteronline.com/")
    }));

	foreach (string product in PlanningCenterApiReferenceService.Products)
  {
    IEnumerable<string> versions = Task.Run(() => service.GetVersionsAsync(product)).Result;
    foreach (string version in versions)
    {
      foreach (PlanningCenterResourceInfo resource in Task.Run(() => service.GetResourcesInfoAsync(product, version)).Result)
      {
        IEnumerable<PlanningCenterResourceAttributeInfo> includables = Task.Run(() => service.GetIncludablesInfoAsync(product, version, resource.ID)).Result;
        IEnumerable<PlanningCenterResourceAttributeInfo> orderables = Task.Run(() => service.GetOrderablesInfoAsync(product, version, resource.ID)).Result;
        IEnumerable<PlanningCenterResourceAttributeInfo> queryables = Task.Run(() => service.GetQueryablesInfoAsync(product, version, resource.ID)).Result;
        IEnumerable<string> filterables = Task.Run(() => service.GetFilterableAttributesAsync(product, version, resource.ID)).Result;

        if (!includables.Any() && !orderables.Any() && !queryables.Any() && !filterables.Any()) continue;
#>
namespace Crews.PlanningCenter.Models.<#=product.ToPascalCase()#>.V<#=version.ToSnakeCase()#>.Parameters;

<#
        if (includables.Any())
        {
#>
<#=$"Includable resources for <see cref=\"Entities.{resource.Name}\" />.".ToXmlDocSummary()#>
public enum <#=resource.Name#>Includable
{
<#
          foreach (PlanningCenterResourceAttributeInfo includable in includables)
          {
#>
<#=includable.Description.ToXmlDocSummary(indentSpaces: 2)#>
  [JsonApiName("<#=includable.Name#>")]
  <#=includable.Name.ToPascalCase('.', '_', '-')#>,

<#
          }
#>
}

<#
        }

        if (orderables.Any())
        {
#>
<#=$"Orderable attributes for <see cref=\"Entities.{resource.Name}\" />.".ToXmlDocSummary()#>
public enum <#=resource.Name#>Orderable
{
<#
          foreach (PlanningCenterResourceAttributeInfo orderable in orderables)
          {
#>
<#=orderable.Description.ToXmlDocSummary(indentSpaces: 2)#>
  [JsonApiName("<#=orderable.Name#>")]
  <#=orderable.Name.ToPascalCase('.', '_', '-')#>,

<#
          }
#>
}

<#
        }
        
        if (queryables.Any())
        {
#>
<#=$"Queryable attributes for <see cref=\"Entities.{resource.Name}\" />.".ToXmlDocSummary()#>
public enum <#=resource.Name#>Queryable
{
<#
          foreach (PlanningCenterResourceAttributeInfo queryable in queryables)
          {
#>
<#=queryable.Description.ToXmlDocSummary(indentSpaces: 2)#>
  [JsonApiName("<#=queryable.Name#>")]
  <#=queryable.Name.ToPascalCase('.', '_', '-')#>,

<#
          }
#>
}

<#
        }
        
        if (filterables.Any())
        {
#>
<#=$"Filterable attributes for <see cref=\"Entities.{resource.Name}\" />.".ToXmlDocSummary()#>
public enum <#=resource.Name#>Filterable
{
<#
          foreach (string filterable in filterables)
          {
#>
<#=$"Filter by {filterable}.".ToXmlDocSummary(indentSpaces: 2)#>
  [JsonApiName("<#=filterable#>")]
  <#=filterable.ToPascalCase('.', '_', '-')#>,

<#
          }
#>
}

<#
        }
        
	      SaveOutputToSubFolder($"../Crews.PlanningCenter.Models/{product.ToPascalCase()}/V{version.ToSnakeCase()}/Parameters", resource.Name + "Parameters.cs");
      }
    }
  }
#>
<#+
private void SaveOutputToSubFolder(string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string newDirectoryName = Path.Combine(templateDirectory,folderName);
  if(!Directory.Exists(newDirectoryName))
    Directory.CreateDirectory(newDirectoryName);
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
#>